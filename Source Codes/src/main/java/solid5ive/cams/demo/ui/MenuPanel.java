/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package solid5ive.cams.demo.ui;

import com.alee.laf.optionpane.WebOptionPane;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.apache.shiro.session.Session;
import org.apache.shiro.session.UnknownSessionException;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import solid5ive.cams.data.entities.Menu;
import solid5ive.cams.data.entities.MenuReference;
import solid5ive.cams.data.entities.Stall;
import solid5ive.cams.demo.model.MenuTableModel;
import solid5ive.cams.service.contracts.MenuService;

/**
 *
 * @author Bernard
 */
@Component
@Scope("prototype")
public class MenuPanel extends javax.swing.JPanel {

    private Subject subject;
    private MenuTableModel menuModel;
    @Autowired
    private MenuService menuService;

    /**
     * Creates new form MenuPanel
     */
    public MenuPanel() {
        initComponents();
        menuModel = new MenuTableModel();
    }

    public Subject getSubject() {
        return subject;
    }

    public void setSubject(Subject subject) {
        this.subject = subject;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new com.alee.laf.table.WebTable();
        backButton = new com.alee.laf.button.WebButton();
        deleteButton = new com.alee.laf.button.WebButton();
        editButton = new com.alee.laf.button.WebButton();
        newButton = new com.alee.laf.button.WebButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        menuTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(menuTable);

        backButton.setText("Back");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        MenuEditDialog menuDialog = new MenuEditDialog((JFrame) SwingUtilities.getWindowAncestor(this), true);
        menuDialog.setVisible(true);

        if (menuDialog.isOkPressed()) {
            try {
                Session session = subject.getSession();
                Stall stall = (Stall) session.getAttribute("Stall");
                Menu menu = menuDialog.getMenu();
                MenuReference menuRef = menu.getReference();
                Menu saved = menuService.createMenu(stall.getId(), menuRef.getName(), menuRef.getPrice(), menu.getTag(), menu.getDescription());
                menuModel.add(saved);
            } catch (IllegalArgumentException ex) {
                UiToolKits.showExceptionDialog(this, "Invalid request", ex);
            } catch (UnknownSessionException ue) {
                UiToolKits.showErrorDialog(
                        this,
                        "Access Denied",
                        "You are not logged in or the session is expired.");
                System.exit(0);
            } catch (Exception ex) {
                UiToolKits.showExceptionDialog(this, "Unexpected exception", ex);
            }
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectIndex = menuTable.getSelectedRow();
        if (selectIndex != -1) {
            Menu menu = menuModel.get(selectIndex);
            MenuEditDialog menuDialog = new MenuEditDialog((JFrame) SwingUtilities.getWindowAncestor(this), true);
            menuDialog.setMenu(menu);
            menuDialog.setVisible(true);

            if (menuDialog.isOkPressed()) {
                try {
                    MenuReference menuRef = menu.getReference();
                    menuService.updateMenu(menu.getId(), menuRef.getName(), menuRef.getPrice(), menu.getTag(), menu.getDescription());
                    menuModel.refresh(selectIndex);
                } catch (IllegalArgumentException ex) {
                    UiToolKits.showExceptionDialog(this, "Invalid request", ex);
                } catch (UnknownSessionException ue) {
                    UiToolKits.showErrorDialog(this, "Access Denied", "You are not logged in or the session has expired.");
                    System.exit(0);
                } catch (Exception ex) {
                    UiToolKits.showExceptionDialog(this, "Unexpected exception", ex);
                }
            }
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectIndex = menuTable.getSelectedRow();
        if (selectIndex != -1) {
            Menu menu = menuModel.get(selectIndex);
            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
            int result = WebOptionPane.showConfirmDialog(
                    topFrame,
                    "Are you sure to delete the menu '" + menu.getReference().getName() + "'?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION);
            if (result != JOptionPane.YES_OPTION) {
                return;
            }

            try {
                menuService.deleteMenu(menu.getId());
                menuModel.remove(selectIndex);
            } catch (IllegalArgumentException ex) {
                UiToolKits.showExceptionDialog(this, "Invalid request", ex);
            } catch (UnknownSessionException ue) {
                UiToolKits.showErrorDialog(this, "Access Denied", "You are not logged in or the session has expired.");
                System.exit(0);
            } catch (Exception ex) {
                UiToolKits.showExceptionDialog(this, "Unexpected exception", ex);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void menuTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTableMouseClicked
        if (evt.getClickCount() >= 2 && menuTable.getSelectedRow() != -1) {
            editButtonActionPerformed(null);
        }
    }//GEN-LAST:event_menuTableMouseClicked

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        try {
            Session session = subject.getSession();
            Stall stall = (Stall) session.getAttribute("Stall");
            List<Menu> menus = menuService.listMenus(stall.getId());
            menuModel.set(menus);
            menuTable.setModel(menuModel);
        } catch (IllegalArgumentException ex) {
            UiToolKits.showExceptionDialog(this, "Invalid request", ex);
        } catch (UnknownSessionException ue) {
            UiToolKits.showErrorDialog(this, "Access Denied", "You are not logged in or the session has expired.");
            System.exit(0);
        } catch (Exception ex) {
            UiToolKits.showExceptionDialog(this, "Unexpected exception", ex);
        }
    }//GEN-LAST:event_formAncestorAdded
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public com.alee.laf.button.WebButton backButton;
    private com.alee.laf.button.WebButton deleteButton;
    private com.alee.laf.button.WebButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private com.alee.laf.table.WebTable menuTable;
    private com.alee.laf.button.WebButton newButton;
    // End of variables declaration//GEN-END:variables
}
